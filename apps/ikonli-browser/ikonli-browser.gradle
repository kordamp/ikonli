/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2015-2023 Andres Almiray
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'application'
    id 'org.beryx.jlink'
    id 'org.jreleaser.jdks'
}

application {
    mainModule = 'org.kordamp.ikonli.browser'
    mainClass = 'org.kordamp.ikonli.browser.Launcher'
    applicationName = 'ikonli-browser'
}

repositories {
    mavenLocal()
}

dependencies {
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0') { transitive = false }
    implementation('org.kordamp.desktoppanefx:desktoppanefx-core:0.15.0') { transitive = false }
    implementation "com.miglayout:miglayout-javafx:$miglayoutVersion"

    implementation project(':ikonli-core')
    implementation project(':ikonli-javafx')
    implementation project(':ikonli-antdesignicons-pack')
    implementation project(':ikonli-bootstrapicons-pack')
    implementation project(':ikonli-boxicons-pack')
    implementation project(':ikonli-bpmn-pack')
    implementation project(':ikonli-bytedance-pack')
    implementation project(':ikonli-captainicon-pack')
    implementation project(':ikonli-carbonicons-pack')
    implementation project(':ikonli-codicons-pack')
    implementation project(':ikonli-coreui-pack')
    implementation project(':ikonli-dashicons-pack')
    implementation project(':ikonli-devicons-pack')
    implementation project(':ikonli-elusive-pack')
    implementation project(':ikonli-entypo-pack')
    implementation project(':ikonli-evaicons-pack')
    implementation project(':ikonli-feather-pack')
    implementation project(':ikonli-fileicons-pack')
    implementation project(':ikonli-fluentui-pack')
    implementation project(':ikonli-fontawesome-pack')
    implementation project(':ikonli-fontawesome5-pack')
    implementation project(':ikonli-fontelico-pack')
    implementation project(':ikonli-foundation-pack')
    implementation project(':ikonli-hawcons-pack')
    implementation project(':ikonli-icomoon-pack')
    implementation project(':ikonli-ionicons-pack')
    implementation project(':ikonli-ionicons4-pack')
    implementation project(':ikonli-jamicons-pack')
    implementation project(':ikonli-ligaturesymbols-pack')
    implementation project(':ikonli-lineawesome-pack')
    implementation project(':ikonli-linecons-pack')
    implementation project(':ikonli-maki-pack')
    implementation project(':ikonli-maki2-pack')
    implementation project(':ikonli-mapicons-pack')
    implementation project(':ikonli-material-pack')
    implementation project(':ikonli-material2-pack')
    implementation project(':ikonli-materialdesign-pack')
    implementation project(':ikonli-materialdesign2-pack')
    implementation project(':ikonli-medicons-pack')
    implementation project(':ikonli-metrizeicons-pack')
    implementation project(':ikonli-microns-pack')
    implementation project(':ikonli-ociicons-pack')
    implementation project(':ikonli-octicons-pack')
    implementation project(':ikonli-openiconic-pack')
    implementation project(':ikonli-paymentfont-pack')
    implementation project(':ikonli-prestashopicons-pack')
    implementation project(':ikonli-remixicon-pack')
    implementation project(':ikonli-runestroicons-pack')
    implementation project(':ikonli-simpleicons-pack')
    implementation project(':ikonli-simplelineicons-pack')
    implementation project(':ikonli-subway-pack')
    implementation project(':ikonli-themify-pack')
    implementation project(':ikonli-typicons-pack')
    implementation project(':ikonli-unicons-pack')
    implementation project(':ikonli-weathericons-pack')
    implementation project(':ikonli-websymbols-pack')
    implementation project(':ikonli-whhg-pack')
    implementation project(':ikonli-win10-pack')
    implementation project(':ikonli-zondicons-pack')

    implementation "org.openjfx:javafx-base:${javafxVersion}:${javafx_platform}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${javafx_platform}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${javafx_platform}"
    implementation "org.openjfx:javafx-fxml:${javafxVersion}:${javafx_platform}"
    implementation "org.openjfx:javafx-media:${javafxVersion}:${javafx_platform}"
    implementation "org.openjfx:javafx-swing:${javafxVersion}:${javafx_platform}"
}

config {
    info {
        description = 'Ikonli icon browser'
    }

    docs {
        sourceHtml {
            enabled = false
        }

        sourceXref {
            enabled = false
        }
    }

    publishing {
        enabled = false
    }
}

license {
    exclude 'eu/hansolo/**/*'
}

processResources {
    expand(
        'ikonli_version': version
    )
}

ext {
    zuluPlatform = rootProject.javafx_platform == 'mac' ? 'macosx' : rootProject.javafx_platform
    zuluHome = project.file("${buildDir}/jdks/zulu16Linux/${zuluVersion}-${zuluPlatform}_x64")
}
if (rootProject.javafx_platform == 'mac') {
    zuluHome = project.file("${buildDir}/jdks/zulu16Osx/${zuluVersion}-${zuluPlatform}_x64/zulu-16.jdk/Contents/Home")
} else if (rootProject.javafx_platform == 'win') {
    zuluHome = project.file("${buildDir}/jdks/zulu16Windows/${zuluVersion}-${zuluPlatform}_x64")
}
System.properties['badass.jlink.java.home']     = zuluHome.absolutePath
System.properties['badass.jlink.jpackage.home'] = zuluHome.absolutePath

jdks {
    zulu16Linux {
        platform = 'linux'
        url      = "https://cdn.azul.com/zulu/bin/${zuluVersion}-linux_x64.tar.gz"
        checksum = '90c534d2544dc1d183f364e3520c1067724476a68dcd326d91a9579de59627b3'
    }
    zulu16Windows {
        platform = 'windows'
        url      = "https://cdn.azul.com/zulu/bin/${zuluVersion}-win_x64.zip"
        checksum = '42930e79a69736d2f2639f92cbb266c5c9b5f80f96a6f2f1422cd03e8e33b619'
    }
    zulu16Osx {
        platform = 'osx'
        url      = "https://cdn.azul.com/zulu/bin/${zuluVersion}-macosx_x64.zip"
        checksum = '194e60b60dfb238c32975c5863c3d306181f964371e2b1327404a56689a34368'
    }
}

jlink {
    imageDir = file("${buildDir}/jlink/ikonli-browser-${version}-${platform}")
    imageZip = file("${buildDir}/distributions/ikonli-browser-${version}-${platform}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        noConsole = true
    }

    addExtraDependencies('javafx')

    jpackage {
        appVersion = rootProject.baseVersion
        outputDir = 'packagers'
        def imgType = rootProject.javafx_platform == 'win' ? 'ico' : rootProject.javafx_platform == 'mac' ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/jpackage/icons/ikonli-browser.$imgType"]
        installerOptions += ['--resource-dir', 'src/main/resources']
        installerOptions += ['--vendor', 'Kordamp']
        if (rootProject.javafx_platform == 'win') {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (rootProject.javafx_platform == 'linux') {
            installerOptions += ['--linux-package-name', 'ikonli-browser', '--linux-shortcut']
        } else if (rootProject.javafx_platform == 'mac') {
            installerOptions += ['--mac-package-name', 'ikonli-browser']
        }
    }
}