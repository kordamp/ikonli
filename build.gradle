/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2015-2025 Andres Almiray
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'com.google.osdetector'
}

ext.javafx_platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
ext.platform = "${osdetector.os}-${osdetector.arch}"
ext.baseVersion = version - '-SNAPSHOT'

config {
    info {
        name          = 'Ikonli'
        description   = 'Icon packs for Java applications'
        inceptionYear = '2015'
        tags          = ['icons', 'javafx', 'swing']

        specification { enabled = false }
    }

    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
            options {
                addBooleanOption('javafx', true)
            }
            aggregate {
                enabled = false
            }
        }
    }
}

idea {
    project {
        jdkName '11'
        languageLevel '11'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'

                def compilerConfiguration = node.component.find { it.'@name' == 'CompilerConfiguration' }
                compilerConfiguration.remove(compilerConfiguration.annotationProcessing)
                compilerConfiguration.append(new XmlParser().parseText('''
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true">
        <processorPath useClasspath="true" />
      </profile>
    </annotationProcessing>'''))
            }
        }
    }
}

subprojects { subproj ->
    if (!subproj.name.contains('guide') && !subproj.name.contains('bom')) {
        tasks.named('compileJava') {
            options.javaModuleVersion = provider { project.version }
            options.release = Integer.parseInt(subproj.rootProject.findProperty('targetCompatibility'))
        }

        license {
            mapping {
                fxml = 'XML_STYLE'
            }
            exclude '**/*.ttf'
            exclude '**/*.eot'
            exclude '**/*.svg'
            exclude '**/*.otf'
            exclude '**/*.woff'
            exclude '**/*.woff2'
            exclude '**/*.css'
            exclude '**/*.md'
            exclude '**/*.txt'
        }
    }

    if (subproj.projectDir.parentFile.name.contains('core') || subproj.name.endsWith('-pack')) {
        jar {
            bundle {
                bnd '''
                    Bundle-SymbolicName: ${project.name}
                    Bundle-Name: ${project.name}
                    Bundle-Version: ${project.version}
                    
                    Import-Package:         !javafx.*, *;
                    Export-Package:         *;
                    Bundle-ActivationPolicy: lazy
                    
                    # Remove private packages to prevent embedding
                    Private-Package: !*
                    
                    -nouses: true
                    -noimportjava: true
                    '''
            }
        }

        dependencies {
            compileOnly 'org.osgi:osgi.core:8.0.0'
            compileOnly 'org.osgi:org.osgi.service.component.annotations:1.5.1'
            testImplementation 'junit:junit:4.13.2'
        }
    }

    if (subproj.name.endsWith('-pack')) {
        dependencies {
            api project(':ikonli-core')
            compileOnly "org.kordamp.jipsy:jipsy-annotations:${jipsyVersion}"
            annotationProcessor "org.kordamp.jipsy:jipsy-processor:${jipsyVersion}"
        }

        tasks.processResources.dependsOn(tasks.register('generateNativeImageResource', org.kordamp.ikonli.gradle.NativeImageResourceGeneratorTask) { t ->
            String ipn = project.name - 'ikonli-' - '-pack'

            t.outputDirectory.set(file('build/resources/main/META-INF/native-image'))
            t.groupId.set(project.group)
            t.artifactId.set(project.name)
            t.version.set(project."${ipn}Version")
            t.iconPackName.set(ipn)
        })
    }
}

project.rootProject.gradle.addBuildListener(new BuildAdapter() {
    @Override
    void projectsEvaluated(Gradle gradle) {
        gradle.rootProject.childProjects.values()
            .grep({ p -> p.name.endsWith('-pack') })
            .each { p ->
                p.tasks.withType(Jar).each { Jar jar ->
                    jar.configure {
                        exclude '**/*.css'
                        exclude '**/*.otf'
                        exclude '**/*.eot'
                        exclude '**/*.svg'
                        exclude '**/*.woff'
                        exclude '**/*.woff2'
                    }
                }
            }
    }
})

profiles {
    profile('sbom') {
        activation {
            property {
                key   = 'sbom'
                value = true
            }
        }
        action {
            println 'SBOM generation is turned ON'

            gradleProjects {
                subprojects {
                    dirs(['core', 'icon-packs']) {
                        cyclonedxBom {
                            includeConfigs = ['runtimeClasspath']
                            projectType = 'library'
                            outputName = "${project.name}-${project.version}-cyclonedx".toString()
                            destination = file('build/reports/cyclonedx')
                            includeLicenseText = false

                            def lic = new org.cyclonedx.model.License()
                            lic.setId('Apache-2.0')
                            lic.setUrl('https://www.apache.org/licenses/LICENSE-2.0')
                            def attachmentText = new org.cyclonedx.model.AttachmentText()
                            attachmentText.setText('')
                            lic.setLicenseText(attachmentText)
                            licenseChoice { lc ->
                                lc.addLicense(lic)
                            }
                        }

                        publishing {
                            publications {
                                main(MavenPublication) {
                                    artifact classifier: 'cyclonedx', source: new File(cyclonedxBom.destination.get(), cyclonedxBom.outputName.get() + '.xml')
                                    artifact classifier: 'cyclonedx', source: new File(cyclonedxBom.destination.get(), cyclonedxBom.outputName.get() + '.json')
                                }
                            }
                        }

                        project.generatePomFileForMainPublication.dependsOn(cyclonedxBom)
                    }
                }
            }
        }
    }
}
